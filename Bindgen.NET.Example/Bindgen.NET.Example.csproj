<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>Exe</OutputType>
		<TargetFramework>net8.0</TargetFramework>
		<Nullable>enable</Nullable>
		<RootNamespace>BindGen.NET.Example</RootNamespace>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>

		<!--A runtime identifier is needed to resolve platform specific native libraries-->
		<RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == ''">$(NETCoreSdkRuntimeIdentifier)</RuntimeIdentifier>
	</PropertyGroup>

	<ItemGroup>
		<ProjectReference Include="..\Bindgen.NET\Bindgen.NET.csproj" />
	</ItemGroup>

	<!-- The binding generator needs access to system headers. The rest of the code below grabs the headers provided by zig. -->
	<PropertyGroup>
		<HostArch>$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)</HostArch>
	</PropertyGroup>

	<Choose>
		<When Condition="$([MSBuild]::IsOSPlatform('Windows'))">
			<PropertyGroup>
				<HostRuntime Condition="'$(HostArch)' == 'X64'">win-x64</HostRuntime>
				<HostRuntime Condition="'$(HostArch)' == 'Arm64'">win-arm64</HostRuntime>
			</PropertyGroup>
		</When>
		<When Condition="$([MSBuild]::IsOSPlatform('Linux'))">
			<PropertyGroup>
				<HostRuntime Condition="'$(HostArch)' == 'X64'">linux-x64</HostRuntime>
				<HostRuntime Condition="'$(HostArch)' == 'Arm64'">linux-arm64</HostRuntime>
			</PropertyGroup>
		</When>
		<When Condition="$([MSBuild]::IsOSPlatform('OSX'))">
			<PropertyGroup>
				<HostRuntime Condition="'$(HostArch)' == 'X64'">osx-x64</HostRuntime>
				<HostRuntime Condition="'$(HostArch)' == 'Arm64'">osx-arm64</HostRuntime>
			</PropertyGroup>
		</When>
	</Choose>

	<ItemGroup>
		<!-- This NuGet package contains system headers that can be provided to the binding generator. -->
		<PackageReference Include="Vezel.Zig.Toolsets.$(HostRuntime)" Version="0.13.0.1">
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
	</ItemGroup>

	<!-- Store the location of the zig lib folder as a global variable that can be accessed in code. -->
	<ItemGroup>
		<Compile Include="$(IntermediateOutputPath)BuildConstants.cs" />
	</ItemGroup>
	<ItemGroup>
		<None Update="Raylib.h">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</None>
	</ItemGroup>

	<Target Name="GenerateConstants" BeforeTargets="CoreCompile">
		<WriteLinesToFile File="$(IntermediateOutputPath)BuildConstants.cs" Lines="#pragma warning disable%0D%0Apublic static class BuildConstants%0D%0A{%0D%0A%09public const string ZigLibPath = @&quot;$(ZigLibPath)&quot;%3B%0D%0A}" Overwrite="true" />
	</Target>

</Project>
